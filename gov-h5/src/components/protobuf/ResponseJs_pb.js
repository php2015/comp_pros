/* eslint-disable */

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.ResponseJs', null, global)

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ResponseJs = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
};
goog.inherits(proto.ResponseJs, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.ResponseJs.displayName = 'proto.ResponseJs'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.ResponseJs.prototype.toObject = function (opt_includeInstance) {
    return proto.ResponseJs.toObject(opt_includeInstance, this)
};

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ResponseJs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.ResponseJs.toObject = function (includeInstance, msg) {
    var f; var obj = {
      tag: jspb.Message.getFieldWithDefault(msg, 1, true),
      isrepeat: jspb.Message.getFieldWithDefault(msg, 2, false),
      msg: jspb.Message.getField(msg, 3),
      islogin: jspb.Message.getFieldWithDefault(msg, 4, false),
      sessionid: jspb.Message.getField(msg, 5),
      params: jspb.Message.getField(msg, 6),
      data: jspb.Message.getField(msg, 7)
    }

  if (includeInstance) {
      obj.$jspbMessageInstance = msg
  }
    return obj
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ResponseJs}
 */
proto.ResponseJs.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.ResponseJs
  return proto.ResponseJs.deserializeBinaryFromReader(msg, reader)
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ResponseJs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ResponseJs}
 */
proto.ResponseJs.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool())
      msg.setTag(value)
      break;
      case 2:
        var value = /** @type {boolean} */ (reader.readBool())
      msg.setIsrepeat(value)
      break;
      case 3:
        var value = /** @type {string} */ (reader.readString())
      msg.setMsg(value)
      break;
      case 4:
        var value = /** @type {boolean} */ (reader.readBool())
      msg.setIslogin(value)
      break;
      case 5:
        var value = /** @type {string} */ (reader.readString())
      msg.setSessionid(value)
      break;
      case 6:
        var value = /** @type {string} */ (reader.readString())
      msg.setParams(value)
      break;
      case 7:
        var value = /** @type {string} */ (reader.readString())
      msg.setData(value)
      break;
      default:
        reader.skipField()
      break;
    }
  }
  return msg
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ResponseJs.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.ResponseJs.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ResponseJs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResponseJs.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1))
  if (f != null) {
    writer.writeBool(
      1,
      f
    )
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2))
  if (f != null) {
    writer.writeBool(
      2,
      f
    )
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3))
  if (f != null) {
    writer.writeString(
      3,
      f
    )
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4))
  if (f != null) {
    writer.writeBool(
      4,
      f
    )
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5))
  if (f != null) {
    writer.writeString(
      5,
      f
    )
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6))
  if (f != null) {
    writer.writeString(
      6,
      f
    )
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7))
  if (f != null) {
    writer.writeString(
      7,
      f
    )
  }
}


/**
 * optional bool tag = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ResponseJs.prototype.getTag = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, true))
};

/** @param {boolean} value */
proto.ResponseJs.prototype.setTag = function (value) {
  jspb.Message.setField(this, 1, value)
};

proto.ResponseJs.prototype.clearTag = function () {
  jspb.Message.setField(this, 1, undefined)
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ResponseJs.prototype.hasTag = function () {
  return jspb.Message.getField(this, 1) != null
};

/**
 * optional bool isRepeat = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ResponseJs.prototype.getIsrepeat = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false))
};

/** @param {boolean} value */
proto.ResponseJs.prototype.setIsrepeat = function (value) {
  jspb.Message.setField(this, 2, value)
};

proto.ResponseJs.prototype.clearIsrepeat = function () {
  jspb.Message.setField(this, 2, undefined)
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ResponseJs.prototype.hasIsrepeat = function () {
  return jspb.Message.getField(this, 2) != null
};

/**
 * optional string msg = 3;
 * @return {string}
 */
proto.ResponseJs.prototype.getMsg = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
};

/** @param {string} value */
proto.ResponseJs.prototype.setMsg = function (value) {
  jspb.Message.setField(this, 3, value)
};

proto.ResponseJs.prototype.clearMsg = function () {
  jspb.Message.setField(this, 3, undefined)
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ResponseJs.prototype.hasMsg = function () {
  return jspb.Message.getField(this, 3) != null
};

/**
 * optional bool isLogin = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ResponseJs.prototype.getIslogin = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false))
};

/** @param {boolean} value */
proto.ResponseJs.prototype.setIslogin = function (value) {
  jspb.Message.setField(this, 4, value)
};

proto.ResponseJs.prototype.clearIslogin = function () {
  jspb.Message.setField(this, 4, undefined)
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ResponseJs.prototype.hasIslogin = function () {
  return jspb.Message.getField(this, 4) != null
};

/**
 * optional string sessionID = 5;
 * @return {string}
 */
proto.ResponseJs.prototype.getSessionid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
};

/** @param {string} value */
proto.ResponseJs.prototype.setSessionid = function (value) {
  jspb.Message.setField(this, 5, value)
};

proto.ResponseJs.prototype.clearSessionid = function () {
  jspb.Message.setField(this, 5, undefined)
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ResponseJs.prototype.hasSessionid = function () {
  return jspb.Message.getField(this, 5) != null
};

/**
 * optional string params = 6;
 * @return {string}
 */
proto.ResponseJs.prototype.getParams = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
};

/** @param {string} value */
proto.ResponseJs.prototype.setParams = function (value) {
  jspb.Message.setField(this, 6, value)
};

proto.ResponseJs.prototype.clearParams = function () {
  jspb.Message.setField(this, 6, undefined)
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ResponseJs.prototype.hasParams = function () {
  return jspb.Message.getField(this, 6) != null
};

/**
 * optional string data = 7;
 * @return {string}
 */
proto.ResponseJs.prototype.getData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
};

/** @param {string} value */
proto.ResponseJs.prototype.setData = function (value) {
  jspb.Message.setField(this, 7, value)
};

proto.ResponseJs.prototype.clearData = function () {
  jspb.Message.setField(this, 7, undefined)
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
// eslint-disable-next-line no-undef
proto.ResponseJs.prototype.hasData = function () {
  return jspb.Message.getField(this, 7) != null
};

goog.object.extend(exports, proto)
