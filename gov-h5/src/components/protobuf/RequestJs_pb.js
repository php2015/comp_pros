/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.RequestJs', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RequestJs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RequestJs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RequestJs.displayName = 'proto.RequestJs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RequestJs.prototype.toObject = function(opt_includeInstance) {
  return proto.RequestJs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RequestJs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RequestJs.toObject = function(includeInstance, msg) {
  var f, obj = {
    params: jspb.Message.getField(msg, 1),
    phonenum: jspb.Message.getField(msg, 2),
    equipmentnumber: jspb.Message.getField(msg, 3),
    phonecode: jspb.Message.getField(msg, 4),
    id: jspb.Message.getField(msg, 5),
    name: jspb.Message.getField(msg, 6),
    isrepeat: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RequestJs}
 */
proto.RequestJs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RequestJs;
  return proto.RequestJs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RequestJs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RequestJs}
 */
proto.RequestJs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParams(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonenum(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEquipmentnumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonecode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsrepeat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RequestJs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RequestJs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RequestJs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RequestJs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string params = 1;
 * @return {string}
 */
proto.RequestJs.prototype.getParams = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RequestJs.prototype.setParams = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.RequestJs.prototype.clearParams = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RequestJs.prototype.hasParams = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string phoneNum = 2;
 * @return {string}
 */
proto.RequestJs.prototype.getPhonenum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RequestJs.prototype.setPhonenum = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.RequestJs.prototype.clearPhonenum = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RequestJs.prototype.hasPhonenum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string equipmentNumber = 3;
 * @return {string}
 */
proto.RequestJs.prototype.getEquipmentnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.RequestJs.prototype.setEquipmentnumber = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.RequestJs.prototype.clearEquipmentnumber = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RequestJs.prototype.hasEquipmentnumber = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string phoneCode = 4;
 * @return {string}
 */
proto.RequestJs.prototype.getPhonecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.RequestJs.prototype.setPhonecode = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.RequestJs.prototype.clearPhonecode = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RequestJs.prototype.hasPhonecode = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string id = 5;
 * @return {string}
 */
proto.RequestJs.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.RequestJs.prototype.setId = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.RequestJs.prototype.clearId = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RequestJs.prototype.hasId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.RequestJs.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.RequestJs.prototype.setName = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.RequestJs.prototype.clearName = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RequestJs.prototype.hasName = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string isRepeat = 7;
 * @return {string}
 */
proto.RequestJs.prototype.getIsrepeat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.RequestJs.prototype.setIsrepeat = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.RequestJs.prototype.clearIsrepeat = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RequestJs.prototype.hasIsrepeat = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto);
